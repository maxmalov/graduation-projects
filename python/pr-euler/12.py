#!/usr/bin/env python

"""
    The sequence of triangle numbers is generated by adding
    the natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have
    over five divisors.

    What is the value of the first triangle number to have over five
    hundred divisors?
"""

from time import time
from utils import Primes

def get_divisor_index (number, divisor):

    index = 0
    d = (number % divisor == 0)

    while d:
        number /= divisor
        index += 1
        d = (number % divisor == 0)

    return (index, number)

def get_divisors_count (number, primes_generator):

    count = 1

    primes_generator.to_begin()

    t = get_divisor_index(number, primes_generator.get_current())
    if t[0] != 0:
        count *= t[0] + 1
        number = t[1]

    while number > 1:
        t = get_divisor_index(number, primes_generator.get_next())
        if t[0] != 0:
            count *= t[0] + 1
            number = t[1]

    return count

def first_triangle_number_with_over_count_divisors (divisors_count):

    n, c = 1, 2
    cancelation_token = False

    primes_generator = Primes()

    while c < 500:
        tr = n * (n + 1) / 2

        if n % 2 == 0:
            c = get_divisors_count(n / 2, primes_generator) * get_divisors_count(n + 1, primes_generator)
        else:
            c = get_divisors_count(n, primes_generator) * get_divisors_count((n + 1) / 2, primes_generator)

        n += 1

    return tr

if __name__ == '__main__':
    start = time()
    print first_triangle_number_with_over_count_divisors(500)
    print time() - start